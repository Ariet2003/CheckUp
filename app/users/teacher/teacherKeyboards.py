from typing import List

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database import requests as rq

teacher_account = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="mark_group"),
     InlineKeyboardButton(text="üìú –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")]
])


async def student_check_buttons(students: List[dict], selected_students: List[int]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

    :param students: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"student_id": int, "name": str}.
    :param selected_students: –°–ø–∏—Å–æ–∫ student_id –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    keyboard = InlineKeyboardBuilder()

    for student in students:
        text = student['name']
        if student['student_id'] in selected_students:
            text += " ‚úÖ"
        keyboard.add(
            InlineKeyboardButton(
                text=text,
                callback_data=f"student_check_{student['student_id']}"
            )
        )
    keyboard.add(InlineKeyboardButton(text="‚úàÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="finish_selection"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="go_home_teacher"))

    return keyboard.adjust(1).as_markup()

go_to_teacher = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="go_home_teacher")]
])