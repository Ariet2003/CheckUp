from typing import Optional, List
from sqlalchemy.orm import selectinload, joinedload
from sqlalchemy import or_, func, CompoundSelect
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.models import async_session, User, UserRole, Student, Faculty, Department, Course, Group, Schedule, \
    AttendanceHistoryStudent, AttendanceHistory
from sqlalchemy.exc import SQLAlchemyError
from bot_instance import bot
from sqlalchemy import select, delete
from datetime import datetime
from sqlalchemy import update
import random
from sqlalchemy import or_
from sqlalchemy.orm import aliased
import json
from openpyxl import Workbook
from sqlalchemy import select, func
from openpyxl import load_workbook
from sqlalchemy.exc import IntegrityError
from datetime import datetime
from sqlalchemy.future import select


async def check_admin(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id,
                        or_(User.role == UserRole.ADMIN, User.role == UserRole.SUPERADMIN)
                    )
                )
                admin = result.scalar_one_or_none()

                if admin:
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while checking if user is admin: {e}")
        return False

async def get_name(telegram_id: str) -> Optional[str]:
    async with async_session() as session:
        result = await session.execute(
            select(User.full_name).where(telegram_id == User.login)
        )
        name = result.scalar_one_or_none()

        return name

# Add a new user
async def add_user(full_name: str, role: UserRole, login: str) -> bool:
    async with async_session() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
            existing_user = await session.execute(
                select(User).where(User.login == login)
            )
            existing_user = existing_user.scalars().first()

            if existing_user:
                return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                full_name=full_name,
                role=role,
                login=login
            )
            session.add(new_user)
            await session.commit()

            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω

async def check_super_admin(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id, User.role == UserRole.SUPERADMIN
                    )
                )
                admin = result.scalar_one_or_none()

                if admin:
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while checking if user is admin: {e}")
        return False

async def delete_admin(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º telegram_id
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id,
                        or_(User.role == UserRole.ADMIN, User.role == UserRole.SUPERADMIN)
                    )
                )
                admin = result.scalar_one_or_none()

                # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if admin:
                    await session.execute(
                        delete(User).where(
                            User.login == telegram_id  # –£–¥–∞–ª—è–µ–º –ø–æ telegram_id
                        )
                    )
                    await session.commit()
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while deleting admin: {e}")
        return False

async def delete_teacher(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id, User.role == UserRole.TEACHER)
                    )
                teacher = result.scalar_one_or_none()

                if teacher:
                    await session.execute(
                        delete(User).where(
                            User.login == telegram_id  # –£–¥–∞–ª—è–µ–º –ø–æ telegram_id
                        )
                    )
                    await session.commit()
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while deleting admin: {e}")
        return False

async def export_users_to_excel_by_role(role: UserRole, filename: str) -> bool:
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
            if role == UserRole.TEACHER:
                result = await session.execute(
                    select(User).where(User.role == role)
                )
                users = result.scalars().all()
            else:
                result = await session.execute(
                    select(User).where(User.role != UserRole.TEACHER)
                )
                users = result.scalars().all()

            if not users:
                print("No users found for the given role.")
                return False

            # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
            workbook = Workbook()
            sheet = workbook.active
            sheet.title = f"{role.value} Users"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["User ID", "Full Name", "Role", "Login", "Created At"]
            sheet.append(headers)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for user in users:
                sheet.append([
                    user.user_id,
                    user.full_name,
                    user.role.value,
                    user.login,
                    user.created_at.strftime("%Y-%m-%d %H:%M:%S") if user.created_at else ""
                ])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            workbook.save(filename)
            return True
    except Exception as e:
        print(f"Error in export_users_to_excel_by_role: {e}")
        return False



async def get_university_statistics() -> str:
    try:
        async with async_session() as session:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await session.scalar(select(func.count(User.user_id)))
            total_admins = await session.scalar(
                select(func.count(User.user_id)).where(User.role == UserRole.ADMIN)
            )
            total_super_admins = await session.scalar(
                select(func.count(User.user_id)).where(User.role == UserRole.SUPERADMIN)
            )
            total_admins = total_admins + total_super_admins
            total_teachers = await session.scalar(
                select(func.count(User.user_id)).where(User.role == UserRole.TEACHER)
            )
            total_students = await session.scalar(select(func.count(Student.student_id)))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏ –∫–∞—Ñ–µ–¥—Ä
            total_faculties = await session.scalar(select(func.count(Faculty.faculty_id)))
            total_departments = await session.scalar(select(func.count(Department.department_id)))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –∏ –≥—Ä—É–ø–ø
            total_courses = await session.scalar(select(func.count(Course.course_id)))
            total_groups = await session.scalar(select(func.count(Group.group_id)))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            total_schedule_entries = await session.scalar(select(func.count(Schedule.schedule_id)))

            # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            total_absences = await session.scalar(
                select(func.count(AttendanceHistoryStudent.id)).where(
                    AttendanceHistoryStudent.status == False
                )
            )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = (
                f"üìä *–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                f"   - –í—Å–µ–≥–æ: {total_users}\n"
                f"   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {total_admins}\n"
                f"   - –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {total_teachers}\n"
                f"   - –°—Ç—É–¥–µ–Ω—Ç—ã: {total_students}\n\n"
                f"üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:\n"
                f"   - –§–∞–∫—É–ª—å—Ç–µ—Ç—ã: {total_faculties}\n"
                f"   - –ö–∞—Ñ–µ–¥—Ä—ã: {total_departments}\n"
                f"   - –ö—É—Ä—Å—ã: {total_courses}\n"
                f"   - –ì—Ä—É–ø–ø—ã: {total_groups}\n\n"
                f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"   - –ó–∞–ø–∏—Å–µ–π: {total_schedule_entries}\n\n"
                f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n"
                f"   - –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {total_absences}\n"
            )

            return stats_text
    except Exception as e:
        print(f"Error occurred while fetching statistics: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def export_faculties_to_excel(filename: str) -> bool:
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
            result = await session.execute(select(Faculty))
            faculties = result.scalars().all()

            if not faculties:
                print("No faculties found.")
                return False

            # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
            workbook = Workbook()
            sheet = workbook.active
            sheet.title = "Faculties"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["Faculty ID", "Name"]
            sheet.append(headers)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for faculty in faculties:
                sheet.append([faculty.faculty_id, faculty.name])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            workbook.save(filename)
            return True
    except Exception as e:
        print(f"Error in export_faculties_to_excel: {e}")
        return False



async def import_faculties_from_excel(filename: str) -> str:
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Excel
        workbook = load_workbook(filename=filename)
        sheet = workbook.active  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = ["Faculty ID", "Name"]
        if not all(header == sheet.cell(row=1, column=i + 1).value for i, header in enumerate(headers)):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: Faculty ID, Name."

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        async with async_session() as session:
            for row in sheet.iter_rows(min_row=2, values_only=True):
                faculty_id, name = row

                if not name:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID (–µ—Å–ª–∏ `faculty_id` –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è)
                if faculty_id:
                    faculty = await session.get(Faculty, faculty_id)
                    if faculty:
                        faculty.name = name  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        new_faculty = Faculty(faculty_id=faculty_id, name=name)
                        session.add(new_faculty)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ `faculty_id`
                    new_faculty = Faculty(name=name)
                    session.add(new_faculty)

            await session.commit()
        return "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î."
    except FileNotFoundError:
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å."
    except IntegrityError as e:
        return f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {e.orig}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}"


async def export_departments_to_excel(filename: str) -> bool:
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ñ–µ–¥—Ä
            result = await session.execute(select(Department))
            departments = result.scalars().all()

            if not departments:
                print("No departments found.")
                return False

            # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
            workbook = Workbook()
            sheet = workbook.active
            sheet.title = "Departments"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["Department ID", "Name", "Faculty ID"]
            sheet.append(headers)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for department in departments:
                sheet.append([department.department_id, department.name, department.faculty_id])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            workbook.save(filename)
            return True
    except Exception as e:
        print(f"Error in export_departments_to_excel: {e}")
        return False


async def import_departments_from_excel(filename: str) -> str:
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Excel
        workbook = load_workbook(filename=filename)
        sheet = workbook.active

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = ["Department ID", "Name", "Faculty ID"]
        if not all(header == sheet.cell(row=1, column=i + 1).value for i, header in enumerate(headers)):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: Department ID, Name, Faculty ID."

        async with async_session() as session:
            for row in sheet.iter_rows(min_row=2, values_only=True):
                department_id, name, faculty_id = row

                if not name or not faculty_id:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID (–µ—Å–ª–∏ `department_id` –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è)
                if department_id:
                    department = await session.get(Department, department_id)
                    if department:
                        department.name = name
                        department.faculty_id = faculty_id  # –û–±–Ω–æ–≤–ª—è–µ–º faculty_id
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        new_department = Department(department_id=department_id, name=name, faculty_id=faculty_id)
                        session.add(new_department)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ `department_id`
                    new_department = Department(name=name, faculty_id=faculty_id)
                    session.add(new_department)

            await session.commit()
        return "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î."
    except FileNotFoundError:
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å."
    except IntegrityError as e:
        return f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {e.orig}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}"



async def get_students_for_current_lesson(telegram_id: int) -> List[int]:
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        current_time = datetime.now().replace(microsecond=0).time()
        print(current_time)

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user_query = await session.execute(select(User).filter(User.login == telegram_id))
            user = user_query.scalars().first()
            print(user)
            if not user:
                return []  # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            schedule_query = await session.execute(
                select(Schedule)
                .filter(Schedule.teacher_id == user.user_id)
                .filter(Schedule.time_start <= current_time)
                .filter(Schedule.time_end >= current_time)
            )
            schedule = schedule_query.scalars().first()
            print(schedule)

            if not schedule:
                return []  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —ç—Ç–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            group_query = await session.execute(
                select(Group).filter(Group.group_id == schedule.group_id)
            )
            group = group_query.scalars().first()

            if not group:
                return []  # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            students_query = await session.execute(
                select(Student.student_id)
                .filter(Student.group_id == group.group_id)
            )
            students = students_query.scalars().all()

            return students

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return []

async def get_student_names_by_ids(student_ids: List[int]) -> List[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∏—Ö student_id.

    :param student_ids: –°–ø–∏—Å–æ–∫ student_id.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"student_id": int, "name": str}.
    """
    try:
        async with async_session() as session:
            students_query = await session.execute(
                select(Student.student_id, Student.name)
                .filter(Student.student_id.in_(student_ids))
            )
            students = students_query.all()
            return [{"student_id": student.student_id, "name": student.name} for student in students]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        return []


async def record_attendance(
        checked_student_id: List[int],
        unchecked_student_id: List[int],
        telegram_id: int  # –í–º–µ—Å—Ç–æ teacher_id –ø–µ—Ä–µ–¥–∞–µ–º telegram_id
) -> bool:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã AttendanceHistory –∏ AttendanceHistoryStudent.

    :param checked_student_id: –°–ø–∏—Å–æ–∫ ID —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏.
    :param unchecked_student_id: –°–ø–∏—Å–æ–∫ ID —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏.
    :param telegram_id: telegram_id —É—á–∏—Ç–µ–ª—è, –∑–∞–ø–∏—Å—ã–≤–∞—é—â–µ–≥–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å.
    :return: True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    try:
        async with async_session() as session:
            async with session.begin():
                # –ò—â–µ–º user_id –ø–æ telegram_id
                teacher = await session.execute(
                    select(User).filter(User.login == telegram_id)
                )
                teacher = teacher.scalar_one_or_none()

                if teacher is None:
                    raise ValueError("–£—á–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω")

                teacher_id = teacher.user_id  # –ü–æ–ª—É—á–∞–µ–º user_id —É—á–∏—Ç–µ–ª—è

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è
                existing_history = await session.execute(
                    select(AttendanceHistory).filter(AttendanceHistory.teacher_id == teacher_id)
                )
                existing_history = existing_history.scalar_one_or_none()

                if existing_history:
                    raise ValueError("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ AttendanceHistory
                attendance_history = AttendanceHistory(teacher_id=teacher_id)
                session.add(attendance_history)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏

                # ID –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
                history_id = attendance_history.history_id

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                checked_records = [
                    AttendanceHistoryStudent(history_id=history_id, student_id=student_id, status=True)
                    for student_id in checked_student_id
                ]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                unchecked_records = [
                    AttendanceHistoryStudent(history_id=history_id, student_id=student_id, status=False)
                    for student_id in unchecked_student_id
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Å—Å–∏—é
                session.add_all(checked_records + unchecked_records)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {e}")
        return False

