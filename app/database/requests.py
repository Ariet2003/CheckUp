from typing import Optional, List
from sqlalchemy.orm import selectinload
from sqlalchemy import or_, func, CompoundSelect
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.models import async_session, User, UserRole, Student, Faculty, Department, Course, Group, Schedule, \
    AttendanceHistoryStudent
from sqlalchemy.exc import SQLAlchemyError
from bot_instance import bot
from sqlalchemy import select, delete
from datetime import datetime
from sqlalchemy import update
import random
from sqlalchemy import or_
from sqlalchemy.orm import aliased
import json
from openpyxl import Workbook
from sqlalchemy import select, func


async def check_admin(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id,
                        or_(User.role == UserRole.ADMIN, User.role == UserRole.SUPERADMIN)
                    )
                )
                admin = result.scalar_one_or_none()

                if admin:
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while checking if user is admin: {e}")
        return False

async def get_name(telegram_id: str) -> Optional[str]:
    async with async_session() as session:
        result = await session.execute(
            select(User.full_name).where(telegram_id == User.login)
        )
        name = result.scalar_one_or_none()

        return name

# Add a new user
async def add_user(full_name: str, role: UserRole, login: str) -> bool:
    async with async_session() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
            existing_user = await session.execute(
                select(User).where(User.login == login)
            )
            existing_user = existing_user.scalars().first()

            if existing_user:
                return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                full_name=full_name,
                role=role,
                login=login
            )
            session.add(new_user)
            await session.commit()

            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω

async def check_super_admin(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id, User.role == UserRole.SUPERADMIN
                    )
                )
                admin = result.scalar_one_or_none()

                if admin:
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while checking if user is admin: {e}")
        return False

async def delete_admin(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º telegram_id
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id,
                        or_(User.role == UserRole.ADMIN, User.role == UserRole.SUPERADMIN)
                    )
                )
                admin = result.scalar_one_or_none()

                # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if admin:
                    await session.execute(
                        delete(User).where(
                            User.login == telegram_id  # –£–¥–∞–ª—è–µ–º –ø–æ telegram_id
                        )
                    )
                    await session.commit()
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while deleting admin: {e}")
        return False

async def delete_teacher(telegram_id: str) -> bool:
    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User).where(
                        User.login == telegram_id, User.role == UserRole.TEACHER)
                    )
                teacher = result.scalar_one_or_none()

                if teacher:
                    await session.execute(
                        delete(User).where(
                            User.login == telegram_id  # –£–¥–∞–ª—è–µ–º –ø–æ telegram_id
                        )
                    )
                    await session.commit()
                    return True
                else:
                    return False
    except Exception as e:
        print(f"Error occurred while deleting admin: {e}")
        return False

async def export_users_to_excel_by_role(role: UserRole, filename: str) -> bool:
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
            if role == UserRole.TEACHER:
                result = await session.execute(
                    select(User).where(User.role == role)
                )
                users = result.scalars().all()
            else:
                result = await session.execute(
                    select(User).where(User.role != UserRole.TEACHER)
                )
                users = result.scalars().all()

            if not users:
                print("No users found for the given role.")
                return False

            # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
            workbook = Workbook()
            sheet = workbook.active
            sheet.title = f"{role.value} Users"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["User ID", "Full Name", "Role", "Login", "Created At"]
            sheet.append(headers)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for user in users:
                sheet.append([
                    user.user_id,
                    user.full_name,
                    user.role.value,
                    user.login,
                    user.created_at.strftime("%Y-%m-%d %H:%M:%S") if user.created_at else ""
                ])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            workbook.save(filename)
            return True
    except Exception as e:
        print(f"Error in export_users_to_excel_by_role: {e}")
        return False



async def get_university_statistics() -> str:
    try:
        async with async_session() as session:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await session.scalar(select(func.count(User.user_id)))
            total_admins = await session.scalar(
                select(func.count(User.user_id)).where(User.role == UserRole.ADMIN)
            )
            total_super_admins = await session.scalar(
                select(func.count(User.user_id)).where(User.role == UserRole.SUPERADMIN)
            )
            total_admins = total_admins + total_super_admins
            total_teachers = await session.scalar(
                select(func.count(User.user_id)).where(User.role == UserRole.TEACHER)
            )
            total_students = await session.scalar(select(func.count(Student.student_id)))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏ –∫–∞—Ñ–µ–¥—Ä
            total_faculties = await session.scalar(select(func.count(Faculty.faculty_id)))
            total_departments = await session.scalar(select(func.count(Department.department_id)))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –∏ –≥—Ä—É–ø–ø
            total_courses = await session.scalar(select(func.count(Course.course_id)))
            total_groups = await session.scalar(select(func.count(Group.group_id)))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            total_schedule_entries = await session.scalar(select(func.count(Schedule.schedule_id)))

            # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            total_absences = await session.scalar(
                select(func.count(AttendanceHistoryStudent.id)).where(
                    AttendanceHistoryStudent.status == False
                )
            )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = (
                f"üìä *–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                f"   - –í—Å–µ–≥–æ: {total_users}\n"
                f"   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {total_admins}\n"
                f"   - –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {total_teachers}\n"
                f"   - –°—Ç—É–¥–µ–Ω—Ç—ã: {total_students}\n\n"
                f"üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:\n"
                f"   - –§–∞–∫—É–ª—å—Ç–µ—Ç—ã: {total_faculties}\n"
                f"   - –ö–∞—Ñ–µ–¥—Ä—ã: {total_departments}\n"
                f"   - –ö—É—Ä—Å—ã: {total_courses}\n"
                f"   - –ì—Ä—É–ø–ø—ã: {total_groups}\n\n"
                f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"   - –ó–∞–ø–∏—Å–µ–π: {total_schedule_entries}\n\n"
                f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n"
                f"   - –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {total_absences}\n"
            )

            return stats_text
    except Exception as e:
        print(f"Error occurred while fetching statistics: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
